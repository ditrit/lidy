# This lidy schema file specifies what a valid lidy schema is
# As such, this is the generic lidy meta-schema

# Note that lidy schema are not strong enough to be able to guarantee that a lidy schema is valid. The following aspects are not checked:
# - There is no verification that the regexes are valid
# - There is no verification that _min is non-negative and that _max is superior to _min
# - There is no verification that the rule reference point to existing rules
#   - Let alone checking for cyclic immediate references
# - There is no verification that

# In a rules declaration, an **immediate reference** is the use of a reference to a rule which will be applied to the same content node as the rule being declared.
# See `expression` (/^expression:$/)

# main
#
# the whole lidy schema as a YAML document
main: document

document:
  _mapOf: { rule.cover: rule.parameter }

rule.cover:
  _regex: "[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)*(:(:[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*))?)?"

rule.parameter: expression

expression:
  _oneOf:
    - rule.name # (uses immediate reference)
    - regex.checker
    - in.checker
    - oneOf.checker

rule.name:
  _regex: "[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)*"

regex.checker:
  _map:
    "_regex": string

in.checker:
  _map:
    "_in": in.parameter

in.parameter:
  _listOf: scalar

scalar:
  _oneOf:
    - timestamp
    - nullType
    - boolean
    - binary
    - float
    - int
    - string

oneOf.checker:
  _map:
    "_oneOf": oneOf.parameter

oneOf.parameter:
  _listOf: expression    


mapChecker:
  _merge:
  - sizingMixin:

# sizingMixing
#
# _max can't be inferior to _min
sizingMixin:
  _oneOf:
  - _mapFacultative:
      "_min": int
      "_max": int
  - _mapFacultative:
      "_nb": int