str->TString:      terminal
int->TInteger:     terminal
float->TFloat:     terminal

namespace->TNamespace: str

description: str

range->TRange:
  _list: [ _oneOf: [ int, unbounded ], _oneOf: [ int, unbounded ] ]

metadata->TMetadata: 
  _dict: 
    template_version: version
    template_author: str
    template_name: str
  _dictOf: { str: str }

version->TVersion:
  _regexp: '^[0-d]+(\.[0-d]+(\.[0-9]+(.[a-zA-Z0-9_]+(\-[0-9]+)?)?)?)?$'

url->TUrl:
  _regexp: '^(https?:\\/\\/)?((([a-z\\d]([a-z\\d_-]*[a-z\\d])*)\\.?)+[a-z\\d_-]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$'

size: scalar-unit.size
scalar-unit.size->TSize:
  _regexp: '([+-] *)?[0-d]+(\.[0-9]+)? (B|kB|KiB|MB|MiB|GB|GiB|TB|TiB)$'

time: scalar-unit.time
scalar-unit.time->TTime:
  _regexp: '([+-] *)?[0-d]+(\.[0-9]+)? (d|h|m|s|ms|us|ns)$'

frequency: scalar-unit.frequency
scalar-unit.frequency->TFreq:
  _regexp: '([+-] *)?[0-d]+(\.[0-9]+)? (kHz|MHz|GHz)$'

bitrate: scalar-unit.bitrate
scalar-unit.bitrate->TBitrate:
  _regexp: '([+-] *)?[0-d]+(\.[0-9]+)? (bps|Kbps|Kibps|Mbps|Mibps|Gbps|Gibps|Tbps|Tibps|Bps|KBps|KiBps|MBps|MiBps|GBps|GiBps|TBps|TiBps)$'

string_value_expresion:
  _oneOf: 
    - str
    - value_expression

value:
  _oneOf:
    - str
    - int
    - float
    - version
    - range
    - frequency
    - bitrate
    - time
    - size

value_expression:
  _oneOf:
    - _dict: { concat: { _nb: 1, _listOf: string_value_expression } }
    - _dict: { get_input: str }
    - _dict: { get_nodes_of_type: str }
    - _dict: { token: { _list: [ string_value_expression, str, int] } }
    - _dict: { join: { _list: [ { _listOf: string_value_expression }, str ], _optional:: [2] } }
    - _dict: { get_property: { _list: [ str, str, str ], _listOf: { _oneOf: [ int, str] }, _optional:: [2,4] } }
    - _dict: { get_attribute: { _list: [ str, str, str ], _listOf: { _oneOf: [ int, str] } , _optional:: [2,4] } }
    - _dict: { get_operation_output: { _list: [ str, str, str, str ] } }
    - _dict: { get_artifact: { _list: [ str, str, str, bool ], _optional:: 3 } }

imports->TImport:
  _listOf:
    _oneOf:
      - str
      - _nb: 1
        _dictOf: { str: str }
      - _nb: 1
        _dictOf:
          str:
            _required: [file]
            _dict:
              file: str
              repository: str
              namespace_prefix: str
              namespace_uri: str

constraint->TConstraint:
  _oneOf:
    - _dict: { equal: any }
    - _dict: { greater_than: value }
    - _dict: { greater_or_equal: value }
    - _dict: { less_than: value }
    - _dict: { less_or_equal: value }
    - _dict: { in_range: range }
    - _dict: { valid_values: _list }
    - _dict: { length: int }
    - _dict: { min_length: int }
    - _dict: { max_length: int }
    - _dict: { pattern: str }
    - _dict: { schema: str }

constraints:
  _listOf: constraint

entry_schema:
  _oneOf:
    - str
    - _required: [ type ]
      _dict:
        type: str
        description: description
        constraints: constraints 
        entry_schema: entry_schema

property->TProperty:
  _required: [ type ]
  _dict:
    type: str
    description: description
    constraints: constraints
    required: bool
    default: value
    status: { _in: [ supported, unsupported, experimental, deprecated, _optional: ] }
    metadata: metadata
    entry_schema: entry_schema 

properties:
  _dictOf: { str, property }

property_assignment->TPropertyAssignment:
  _oneOf:
    - value_expression
    - value
    - _dict:
        description: description
        value: { _oneOf: [ value_expression, value] }

property_assignments:
  _dictOf: { str, property_assignment }

attribute->TAttribute:
  _required: [ type ]
  _dict:
    type: str 
    description: description
    default: value
    status: { _in: [ supported, unsupported, experimental, deprecated, _optional: ] }
    entry_schema: entry_schema 

attributes:
  _dictOf: { str, attribute }

attribute_assignment->TAttributeAssignement:
  _oneOf:
    - value_expression
    - value
    - _dict:
        description: description
        value: { _oneOf: [ value_expression, value ] }

attribute_assignments:
  _dictOf: { str, attribute_assignment }

input_parameter->TInput:
  _required: [ type ]
  _dict:
    type: str 
    description: description
    constraints: constraints
    required: bool
    default: value
    status: { _in: [ supported, unsupported, experimental, deprecated, _optional: ] }
    entry_schema: entry_schema 
    value: { _oneOf: [ value, value_expression ] } 

input_parameters:
  _dictOf: { str, input_parameter }

input_assignments:
  property_assignments

output_parameter->Toutput:
  _required: [ type ]
  _dict:
    type: str 
    description: description
    constraints: constraints
    required: bool
    default: value
    status: { _in: [ supported, unsupported, experimental, deprecated, _optional: ]}
    entry_schema: entry_schema 
    value: { _oneOf: [ value, value_expression ] } 

output_parameters:
  _dictOf: { str, output_parameter }

repository->TRepository:
  _oneOf:
    - str
    - _required: [url]
      _dict:
        url: str
        description: description
        credential:
          _required: [token]
          _dict:
            protocol: str
            token: str
            token_type: str
            user: str

artifact_def->TArtifactDef: 
  _oneOf:
    - str
    - _required: [type, file]
      _dict:
        type: str
        file: str
        repository: str
        description: description
        deploy_path: str

artifact_defs:
  _dictOf: { str, artifact_def }

type_common_keys:
  _dict:
    derived_from: str
    version: version
    metadata: metadata
    description: description

artifact_type->TArtifactType:
  _dict:
    file_ext: str
    mime_type: str
    properties: properties
  _copy: type_common_keys

artifact_types:
  _dictOf: { str, artifact_type}

data_type^TDataType:
  _dict:
    properties: properties
    constraints: constraints
  _copy: type_common_keys

implementation->TImplementation:
  _oneOf:
    - str
    - _dict:
        primary: {_oneOf: [ str, artifact_def ]}
        dependencies: { _listOf: {_oneOf: [str, artifact_def]}}

operation_def->TOperationDef:
  _dict:
    description: description
    inputs: properties
    implementation: implementation

operation_def_template->TOperationDefTemplate:
  _dict:
    description: description
    inputs: input_assignments
    implementation: implementation

interface_type->TInterfaceDef:
  _dict:
    inputs: properties
  _copy: type_common_keys
  _dictOf:
    str: operation_def

interface_types:
  _dictOf: { str: interface_def }

interface_def->TInterfaceDef:
  _required: [ type ]
  _dict:
    - type: str
    - inputs: properties
  _copy: operation_def

interface_defs:
  _dictOf: { str, interface_def }

interface_def_template->TInterfaceDefTemplate:
  _dict: 
    - inputs: properties
  _copy: operation_def

interface_defs_template:
  _dictOf: { str, interface_def_template }

capability_type->TCapabilityType:
  _dict:
    - properties: properties
    - attributes: attributes
    - valid_source_types: { _listOf: str }
  _copy: type_common_keys

capability_def->TCapabilityDef:
  _oneOf:
    - _dict:
        - type: str
        - description: description
        - properties: properties
        - attributes: attributes
        - valid_source_types: { _listOf: str } 
        - occurrences: range
    - str

capability_defs:
  _dictOf: { str: capability_def }

capability_assignment->TCapabilityAssignment:
  _dict:
    - properties: property_assignments
    - attributes: attribute_assignments
      required: true

capability_assignments:
  _dictOf: { str: capability_assignment }

property_filter->TPropertyFilter:
  _nb: 1 
  _dictOf:
    str: 
      _oneOf:
        - constraint
        - value
        - _listOf: { _oneOf: [ constraint, value ] }

properties_filter:
  _listOf:
    property_filter

capability_filter->TCapabilityFilter:
  _nb: 1 
  _dictOf:
    str: { _dict: { properties: properties_filter } }

capabilities_filter:
  _listOf:
    capability_filter

node_filter->TNodeFilter:
  _dict:
    properties: properties_filter
    capabilities: capabilities_filter

requirement_def->TRequirementDef:
  _nb: 1
  _dictOf:
    str:
      _oneOf:
        - str
        - _required: [ capability ]
          _dict:
            capability: str
            description: description
            node: str
            occurences: range
            relationship:  
                _oneOf:
                  - str
                  - _dict:
                      type: str
                      interfaces: interface_defs

requirement_defs:
  _listOf:
    requirement_def

requirement_assignment->TRequirementAssignment:
    _nb: 1
    _dictOf:
      str: 
        _oneOf:
          - str
          - _dict:
              node: str
              relationship:  
                _oneOf:
                  - str
                  - _dict:
                      type: str
                      properties: property_assignments
                      interfaces: interface_defs_template
              capability: str
              occurrences: range
              node_filter: node_filter


requirement_assignments:
  _listOf:
    requirement_assignment

workflow_condition_clause:
  _listOf:
    _nb: 1
    _dict:
      or: workflow_condition_clause
      and: workflow_condition_clause
      assert: 
        _listOf: { _nb: 1, _dictOf: { str: constraints } }
    _dictOf: 
      str: { _nb: 1, _dictOf: { str: constraints } }

workflow_preconditions:
  _listOf:
    _dict:
      target: str
      target_relationship: str
      condition: workflow_condition_clause

workflow_activities:
  _listOf:
    _dict:
      delegate: str
      set_state: str
      call_operation: str
      inline: str

workflow_steps:
  _listOf:
      _nb: 1
      _dictOf:
        str:
          _dict:
            target: str
            target_relationship: str
            filter: workflow_condition_clause
            activities: workflow_activities
            operation_host: str
            on_succes: 
              _oneOf: [ str, { _listOf: str } ]
            on_failure:
              _oneOf: [ str, { _listOf: str } ]

workflow_source_weaving:
  _listOf:
    _dict:
      after: str
      before: str
      wait_target: str
      after_target: str
      activity: str

workflow_target_weaving:
  _listOf:
    _dict:
      after: str
      before: str
      wait_source: str
      after_source: str
      activity: str

declarative_workflow_node_defs:
  _listOf:
    _nb: 1
    _dictOf:
      str:
        _dict:
          description: description
          metadata: metadata
          inputs: properties
          preconditions: workflow_preconditions
          steps: workflow_steps
          
declarative_workflow_rel_defs:
  _listOf:
    _nb: 1
    _dictOf:
      str: 
        _dict:
          description: description
          metadata: metadata
          inputs: properties
          preconditions: workflow_preconditions
          source_weaving: workflow_source_weaving
          target_weaving: workflow_target_weaving

imperative_workflow_defs:
  _listOf:
    _nb: 1
    _dictOf:
      str: 
        _dict:
          description: description
          metadata: metadata
          inputs: properties
          preconditions: workflow_preconditions
          steps: workflow_steps

node_type:
  _dict:
    properties: properties
    attributes: attributes
    capabilities: capability_defs
    requirements: requirement_defs
    interfaces: interface_defs
    workflows: declarative_workflow_node_defs
  _copy: type_common_keys

node_types:
  _dictOf: { str, node_type }

node_template:
  _required: [ type|copy ]
  _dict: 
    type: str
    metadata: metadata
    description: description
    directives: { _list: str }
    properties: property_assignments
    attributes: attribute_assignments
    capabilities: capability_assignments
    requirements: requirement_assignments
    interfaces: interface_defs_template
    artifacts: artifact_defs
    node_filter: node_filter
    copy: str

node_templates:
  _dictOf: { str, node_template }

relationship_type:
  _dict:
    properties: properties
    attributes: attributes
    interfaces: interface_defs
    valid_target_types: { _listOf: str }
    workflows: declarative_workflow_rel_defs
  _copy: type_common_keys

relationship_types:
  _dictOf: { str, relationship_type }

relationship_template:
  _required: [ type|copy ]
  _dict:
    type: str
    description: description
    metadata: metadata
    properties: properties
    attributes: attributes
    interfaces: inteface_defs_template
    copy: str

relationship_templates:
  _dictOf: { str, relationship_template }

group_type:
  _dict:
    properties: properties
    capabilities: capability_defs
    requirements: requirement_defs
    interfaces: interface_defs
    members: { _listOf: str }
  _copy: type_common_keys

group_types:
  _dictOf: { str: group_type }

group_def:
  _required: [type]
  _dict:
    type: str
    description: description
    properties: properties
    members: { _listOf: str }
    interfaces: interface_defs_template

group_defs:
  _dictOf: { str, group_def }

trigger_defs:
  _listOf:
      _nb: 1
      _dictOf:
        str:
          _dict:
            description: description
            event: { _oneOf: [ str, { _dict: { type: str } } ] }
            schedule: value
            target_filter: 
              _dict:
                node: str
                requirement: str
                capability: str
            condition:
                _oneOf:
                  - constraint
                  - _dict: { constraint: constraint }
            period: str
            evaluations: int
            method: str
            action: { _oneOf: [ str, operation_def ] }

policy_type:
  _dict:
    properties: properties
    targets: { _listOf: str }
    triggers: trigger_defs
  _copy: type_common_keys

policy_types:
  _dictOf: { str,  policy_type }

policy_defs:
  _listOf:
      _nb: 1
      _dictOf:
        str: 
          _dict:
            type: str
            description: description
            properties: property_assignments
            targets: { _listOf: str }
            triggers: trigger_defs

properties_mapping:
  _dictOf:
    str:
      _oneOf:
        - value
        - value_expression
        - _listOf: { str }
          max: 3
        - _nb: 1
          _dict:
            mapping: 
              _oneOf: [ str, { max: 3, _listOf: { str } } ]
            value: 
              _oneOf: [ value, value_expression ]

attributes_mapping:
  _dictOf:
    str:
      _oneOf:
        - value
        - value_expression
        - _listOf: { str }
          max: 3
        - _nb: 1
          _dict:
            mapping: 
              _oneOf: [ str, { max: 3, _listOf: { str } } ]
            value: 
              _oneOf: [ value, value_expression ]

capabilities_mapping:
  _dictOf:
    str:
      _oneOf:
        - { _listOf: str, max: 2 }
        - _dict:
            mapping: { _oneOf: [ str, {_listOf: str, max: 3 } ] }
            properties: property_assignments
            attributes: attribute_assignments

requirements_mapping:
  _dictOf:
    str:
      _oneOf:
        - { _listOf: str, max: 2 }
        - _dict:
            mapping: { _oneOf: [ str, {_listOf: str, max: 3 } ] }
            properties: property_assignments
            attributes: attribute_assignments

interfaces_mapping:
  _dictOf: { str: {_dict: { idDefinition: str } } }

substitution_mappings->TSubstitutionMappings:
  _required: [ node_type ]
  _dict:
    node_type: str
    properties: properties_mapping
    capabilities: capabilities_mapping
    requirements: requirements_mapping
    attributes: attributes_mapping
    interfaces: interfaces_mapping

topology_template->TTopologyTemplate:
  _dict:
    description: description
    inputs: input_parameters
    outputs: output_parameters
    node_templates: node_templates
    relationship_templates: relationship_templates
    groups: group_defs
    policies: policy_defs
    substitution_mappings: substitution_mappings
    workflows: imperative_workflow_defs

service_template->TServiceTemplate:
  _required: [ tosca_definitions_version ]
  _dict:
    tosca_definitions_version: str
    description: description
    namespace: namespace
    metadata: metadata
    repositories: repositories
    imports: imports
    artifact_types: artifact_types
    data_types: data_types
    capability_types: capability_types
    interface_types: interface_types
    relationship_types: relationship_types
    node_types: node_types
    group_types: group_types
    policy_types: policy_types
    topology_template: topology_template
 