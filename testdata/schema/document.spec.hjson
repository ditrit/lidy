{
  target: document
  "tell valid documents from invalid documents": {
    "accept if valid": [
      [
        '''
        main: animal
        animal: str
        '''
        {}
      ]
    ]
    "PENDING reject if the target rule (main) is missing": [
      [
        "animal: str"
        { contain: "main" }
      ]
    ]
    "PENDING reject if a reference cannot be resolved": [
      [
        "main: animal"
        { contain: "animal" }
      ]
    ]
  }
  "detect invalid self-references in documents": {
    "accept if the self-reference is sufficiently indirect": [
      [ "main:\n  _map: {}\n  _optional: { content: main }", {} ]
      [ "main:\n  _tuple: []\n  _optional: [main]", {} ]
      [
        '''
        main: animal
        animal:
          _map:
            name: str
            age: str
            eat: edible
        edible:
          _oneOf:
            - _in: [grass, leaves]
            - animal
        '''
        {}
      ]
      [
        '''
        main: person
        person:
          _map:
            name: str
            mother: person
            father: person
        '''
        {}
      ]
    ]
    "accept indirect even if no finite schema can be matched": [
      [ "main:\n  _listOf: main", {} ]
      [ "main:\n  _tuple: [main]", {} ]
      [ "main:\n  _mapOf: { str: main }", {} ]
      [ "main:\n  _mapOf: { main: main }", {} ]
      [ "main:\n  _map: { content: main }", {} ]
    ]
    "PENDING reject if the self-reference is too direct": [
      [ "main: main", { contain: "main" } ]
      [ "main: animal\nanimal: animal", { contain: "animal" } ]
      [
        '''
        main:
          _oneOf:
            - piece
            - plant
        piece:
          _in: [grass, leaf, branch, tree]
        plant:
          _oneOf:
            - plant
            - piece
        '''
        {
          contain: "plant"
        }
      ]
      [
        '''
        main: weather
        weather:
          _merge: [rain, cloud]
        rain:
          _merge: [water, cloud]
        cloud:
          _merge: [water, rain]
        water:
          _map:
            temperature: float
        '''
        {
          contain: "cloud"
        }
      ]
      [
        '''
        main: aa
        aa: { _merge: [bb] }
        bb: { _oneOf: [aa, cc] }
        cc: str
        '''
        {
          contain: "aa"
        }
      ]
    ]
  }
}
